#pragma once

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#define ARRAYFLAG_StandardVar	0
#define ARRAYFLAG_SuperVar		2

#define Ninject(a,b) _Ninject((DWORD)a,(DWORD)b)

// SuperVar types
enum
{
	SV_TYPE_INT_PTR,
	SV_TYPE_FLOAT_PTR,
};
struct sSVFlags
{
	enum
	{
		OFFSET_TYPE_CONST,
		OFFSET_TYPE_VAR,
		OFFSET_TYPE_LABEL,
	} m_eOffsetType		: 3;
};

BOOL	APIENTRY DllMain(HMODULE, DWORD, LPVOID);
void	_Ninject(DWORD pAddress, DWORD pDest);
void	_patch(void *pAddress, DWORD data, DWORD iSize);
int		_read(void *pAddress, DWORD iSize);
void	_jmpTo(BYTE *pAddress, DWORD data);

DWORD	*	GetSuperVarPointer(CRunningScript *pScript, BYTE *pSize);
DWORD		SV_GetArrayVal();
void		SV_SetArrayVal();
DWORD		SV_GetArrayPtr();
void		HOOK_ClearJT();
void		HOOK_CollectParams();
void		HOOK_CollectParamsNoInc();
void		HOOK_CollectParamsForScript();
void		HOOK_StoreParams();
void		HOOK_GetScriptVarPtr();
void		HOOK_CollectString();

char	DEBUG_STRING[260];

DWORD		ADDR_JT;

CGame				*	pGame;

CRunningScript		*	g_pScript;
DWORD					g_ArrayOffset;
DWORD				*	g_ArrayIndex;

// Dirty macroes (just how I like 'em)
#define POFF(d,a) (DWORD)d-(a+5)
#define BYTE1(v) (BYTE)((v)>>8)
#define BYTE2(v) (BYTE)((v)>>16)
#define BYTE3(v) (BYTE)((v)>>24)
#define DW2ARR(v) (BYTE)(v),BYTE1(v),BYTE2(v),BYTE3(v)
#define W2ARR(v) (BYTE)(v),BYTE1(v)
#define PATCH_JMP_DATA(a,d) {0xE9,DW2ARR(POFF(d,a))}
#define PATCH_CALL_DATA(a,d) {0xEB,DW2ARR(POFF(d,a))}

#define JUMP_COLLECTPARAMS_INT				0x4640BD
#define JUMP_COLLECTPARAMS_GVAR				0x4640CF
#define JUMP_COLLECTPARAMS_LVAR				0x4640EB
#define JUMP_COLLECTPARAMS_BYTE				0x464114
#define JUMP_COLLECTPARAMS_WORD				0x464127
#define JUMP_COLLECTPARAMS_FLOAT			JUMP_COLLECTPARAMS_INT
#define JUMP_COLLECTPARAMS_GARRAY			0x46413B
#define JUMP_COLLECTPARAMS_LARRAY			0x46419C
#define JUMP_COLLECTPARAMS_8BYTESTR			JUMP_COLLECTPARAMS_INT
#define JUMP_COLLECTPARAMS_G8BYTESTR		JUMP_COLLECTPARAMS_INT
#define JUMP_COLLECTPARAMS_L8BYTESTR		JUMP_COLLECTPARAMS_INT
#define JUMP_COLLECTPARAMS_G8BYTESTRARRAY	JUMP_COLLECTPARAMS_INT
#define JUMP_COLLECTPARAMS_L8BYTESTRARRAY	(DWORD)&HOOK_CollectParams

#define JUMP_COLLECTNOINC_INT				0x464277
#define JUMP_COLLECTNOINC_GVAR				0x46428B
#define JUMP_COLLECTNOINC_LVAR				0x4642A9
#define JUMP_COLLECTNOINC_BYTE				0x4642C9
#define JUMP_COLLECTNOINC_WORD				0x4642DE
#define JUMP_COLLECTNOINC_FLOAT				JUMP_COLLECTNOINC_INT
#define JUMP_COLLECTNOINC_GARRAY			0x4642F6
#define JUMP_COLLECTNOINC_LARRAY			0x464320
#define JUMP_COLLECTNOINC_8BYTESTR			JUMP_COLLECTNOINC_INT
#define JUMP_COLLECTNOINC_G8BYTESTR			JUMP_COLLECTNOINC_INT
#define JUMP_COLLECTNOINC_L8BYTESTR			JUMP_COLLECTNOINC_INT
#define JUMP_COLLECTNOINC_G8BYTESTRARRAY	JUMP_COLLECTNOINC_INT
#define JUMP_COLLECTNOINC_L8BYTESTRARRAY	(DWORD)&HOOK_CollectParamsNoInc

#define JUMP_SETSCRPARAMS_INT				0x464534
#define JUMP_SETSCRPARAMS_GVAR				0x464546
#define JUMP_SETSCRPARAMS_LVAR				0x464562
#define JUMP_SETSCRPARAMS_BYTE				0x46458B
#define JUMP_SETSCRPARAMS_WORD				0x46459E
#define JUMP_SETSCRPARAMS_FLOAT				JUMP_SETSCRPARAMS_INT
#define JUMP_SETSCRPARAMS_GARRAY			0x4645B2
#define JUMP_SETSCRPARAMS_LARRAY			0x464613
#define JUMP_SETSCRPARAMS_8BYTESTR			JUMP_SETSCRPARAMS_INT
#define JUMP_SETSCRPARAMS_G8BYTESTR			JUMP_SETSCRPARAMS_INT
#define JUMP_SETSCRPARAMS_L8BYTESTR			JUMP_SETSCRPARAMS_INT
#define JUMP_SETSCRPARAMS_G8BYTESTRARRAY	JUMP_SETSCRPARAMS_INT
#define JUMP_SETSCRPARAMS_L8BYTESTRARRAY	(DWORD)&HOOK_CollectParamsForScript

#define JUMP_STOREPARAMS_DEFAULT			0x4644C9
#define JUMP_STOREPARAMS_GVAR				0x4643AF
#define JUMP_STOREPARAMS_LVAR				0x4643CB
#define JUMP_STOREPARAMS_BYTE				JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_WORD				JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_FLOAT				JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_GARRAY				0x4643F4
#define JUMP_STOREPARAMS_LARRAY				0x464455
#define JUMP_STOREPARAMS_8BYTESTR			JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_G8BYTESTR			JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_L8BYTESTR			JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_G8BYTESTRARRAY		JUMP_STOREPARAMS_DEFAULT
#define JUMP_STOREPARAMS_L8BYTESTRARRAY		(DWORD)&HOOK_StoreParams

const DWORD SV_CollectParamsTable[] = {
	JUMP_COLLECTPARAMS_INT,
	JUMP_COLLECTPARAMS_GVAR,
	JUMP_COLLECTPARAMS_LVAR,
	JUMP_COLLECTPARAMS_BYTE,
	JUMP_COLLECTPARAMS_WORD,
	JUMP_COLLECTPARAMS_FLOAT,
	JUMP_COLLECTPARAMS_GARRAY,
	JUMP_COLLECTPARAMS_LARRAY,
	JUMP_COLLECTPARAMS_8BYTESTR,
	JUMP_COLLECTPARAMS_G8BYTESTR,
	JUMP_COLLECTPARAMS_L8BYTESTR,
	JUMP_COLLECTPARAMS_G8BYTESTRARRAY,
	JUMP_COLLECTPARAMS_L8BYTESTRARRAY
};
const DWORD SV_CollectNoIncTable[] = {
	JUMP_COLLECTNOINC_INT,
	JUMP_COLLECTNOINC_GVAR,
	JUMP_COLLECTNOINC_LVAR,
	JUMP_COLLECTNOINC_BYTE,
	JUMP_COLLECTNOINC_WORD,
	JUMP_COLLECTNOINC_FLOAT,
	JUMP_COLLECTNOINC_GARRAY,
	JUMP_COLLECTNOINC_LARRAY,
	JUMP_COLLECTNOINC_8BYTESTR,
	JUMP_COLLECTNOINC_G8BYTESTR,
	JUMP_COLLECTNOINC_L8BYTESTR,
	JUMP_COLLECTNOINC_G8BYTESTRARRAY,
	JUMP_COLLECTNOINC_L8BYTESTRARRAY
};
const DWORD SV_CollectParamsForScriptTable[] = {
	JUMP_SETSCRPARAMS_INT,
	JUMP_SETSCRPARAMS_GVAR,
	JUMP_SETSCRPARAMS_LVAR,
	JUMP_SETSCRPARAMS_BYTE,
	JUMP_SETSCRPARAMS_WORD,
	JUMP_SETSCRPARAMS_FLOAT,
	JUMP_SETSCRPARAMS_GARRAY,
	JUMP_SETSCRPARAMS_LARRAY,
	JUMP_SETSCRPARAMS_8BYTESTR,
	JUMP_SETSCRPARAMS_G8BYTESTR,
	JUMP_SETSCRPARAMS_L8BYTESTR,
	JUMP_SETSCRPARAMS_G8BYTESTRARRAY,
	JUMP_SETSCRPARAMS_L8BYTESTRARRAY
};
const DWORD SV_StoreParamsTable[] = {
	JUMP_STOREPARAMS_GVAR,
	JUMP_STOREPARAMS_LVAR,
	JUMP_STOREPARAMS_BYTE,
	JUMP_STOREPARAMS_WORD,
	JUMP_STOREPARAMS_FLOAT,
	JUMP_STOREPARAMS_GARRAY,
	JUMP_STOREPARAMS_LARRAY,
	JUMP_STOREPARAMS_8BYTESTR,
	JUMP_STOREPARAMS_G8BYTESTR,
	JUMP_STOREPARAMS_L8BYTESTR,
	JUMP_STOREPARAMS_G8BYTESTRARRAY,
	JUMP_STOREPARAMS_L8BYTESTRARRAY
};
const DWORD SV_GetScriptVarPtrTable[] = {
	0x4647BB,
	0x4647D6,
	0x464808,
	0x46486B,
	0x4648A7,
	(DWORD)&HOOK_GetScriptVarPtr
};